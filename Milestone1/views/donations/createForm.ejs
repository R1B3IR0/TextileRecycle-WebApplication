<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Donation</title>
    <link rel="stylesheet" href="/stylesheets/style.css">

    <!--CSS(leaflet)-->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin=""/>

    <link rel="stylesheet" href="/stylesheets/map.css"/>

    <style>
        /* Estilo para o campo de entrada */
        .input-style {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            margin-bottom: 10px;
        }

        /* Estilo para o campo de seleção */
        .select-style {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            margin-bottom: 10px;
            /* Adicione outros estilos que você deseja aplicar ao campo de seleção aqui */
        }
    </style>
</head>
<body>
<div class="register-container">
    <h2>Criar Doação</h2>
    <form action="/donations/create" method="post" enctype="multipart/form-data" >
        <div class="form-group">
            <label for="donator">Doador:</label>
            <select name="donator" id="donator" class="select-style" required>
                <option value="">Selecione um doador</option>
                <% donators.forEach(donator => { %>
                    <option value="<%= donator._id %>">
                        <%= donator.name %>
                    </option>
                <% }); %>
            </select>
        </div>
        <div class="form-group">
            <label for="entity">Entidade:</label>
            <select name="entity" id="entity" class="select-style" required>
                <option value="">Selecione uma entidade</option>
                <% entities.forEach(entity => { %>
                    <option value="<%= entity._id %>">
                        <%= entity.name %>
                    </option>
                <% }); %>
            </select>
        </div>

        <div class="form-group">
            <label for="donationDate">Data da doação:</label>
            <input type="date" name="donationDate" id="donationDate" required>
        </div>

        <div class="form-group">
            <label for="typeOfDonation">Tipo de doação:</label>
            <select name="typeOfDonation" id="typeOfDonation" required>
                <option value="">Escolha o tipo de doação</option>
                <option value="Doação Têxtil">Doação Têxtil</option>
                <option value="Dinheiro">Dinheiro</option>
            </select>
        </div>
        <!-- Amount and Paypal button container -->
        <div id="amountDiv" style="display: none;">
            <label for="amount">Quantia:</label>
            <input type="number" name="amount" id="amount">
            <p>
            <div onclick="history.go(-1);" href="/donations" id="paypal-button-container" style="display:none"></div>
        </div>

        <div id="typeOfClothingDiv" style="display: none;">
            <div id="clothingFields">
                <div class="clothing-field">
                    <select name="typeOfClothing[0].category" class="typeOfClothing" required>
                        <option value="">Escolha o tipo de roupa</option>
                        <option value="Fatos e blazers">Fatos e blazers</option>
                        <option value="Calças">Calças</option>
                        <option value="Meias e Roupa Interior">Meias e Roupa Interior</option>
                        <option value="Tops e t-shirts">Tops e t-shirts</option>
                        <option value="Camisolas e sweaters">Camisolas e sweaters</option>
                        <option value="Casacos">Casacos</option>
                        <option value="Pijamas">Pijamas</option>
                        <option value="Outros">Outros</option>
                    </select>
                    <input type="number" name="typeOfClothing[0].quantity" class="quantity" placeholder="Quantidade"
                           required>
                    <select name="typeOfClothing[0].state" class="state" required>
                        <option value="">Escolha o estado da roupa</option>
                        <option value="Novo com etiquetas">Novo com etiquetas</option>
                        <option value="Novo sem etiquetas">Novo sem etiquetas</option>
                        <option value="Muito bom">Muito bom</option>
                        <option value="Bom">Bom</option>
                        <option value="Satisfatório">Satisfatório</option>
                    </select>
                    <p></p>
                </div>
            </div>
            <p></p>
            <button type="button" id="addClothingField">Adicionar</button>
        </div>
        <p></p>
        <!-- Campo para ‘upload’ de imagem -->
        <div id="imageDiv" style="display: none;">
            <label for="image">Imagem:</label>
            <input type="file" name="image" id="image">
        </div>
        <p></p>
        <!-- Campo para armazenar o nome do armazém -->
        <div id="warehouseNameGroup" style="display: none;">
            <label for="warehouseName">Selecione no mapa o Armazém:</label>
            <input type="text" name="warehouseName" id="warehouseName" readonly>
        </div>
        <p></p>
        <div id="map" style="display:none;"></div>
        <p></p>
        <div class="form-group" id="pointsDiv">
            <label for="totalPoints">Pontos:</label>
            <input type="text" id="totalPoints" class="modern-result" readonly>
        </div>
        <button id="submitButton" type="submit" class="submit-btn" style=" display:none">Criar Doação</button>
    </form>

    <script src="/javascripts/showBlockTypeOfDonation.js"></script>
    <script src="/javascripts/addClothing.js"></script>
    <script src="/javascripts/calculatePoints.js"></script>


    <div class="back-button" style="text-align: right;">
        <a href="/donations" onclick="history.go(-1);">Voltar</a>
    </div>
</div>

<script src="https://www.paypal.com/sdk/js?client-id=Aam9--W1eErGEHOOk4QgvOdxkLpkECTs3J88-4aNvl7SeANFiLl0rg3c52NV5usNfnyS16zBB2r01hVw&currency=EUR"></script>
<script src="/javascripts/paypal.js"></script>

<!--JS2(leaflet)-->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>

<!--JS(leaflet)-->
<script>
    // Create a map object - LatLng(41.364546, -8.19918) - Felgueiras
    var map = L.map('map').setView([41.364546, -8.19918], 11); //setView([latitude, longitude], zoom level)

    // Layer with the map data
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);


    // Click event to get the coordinates
    function onMapClick(e) {
        alert("You clicked the map at " + e.latlng);
    }

    map.on('click', onMapClick);


    async function loadGeoJson() {
        try {
            const request = await fetch("/geoJson/felgueiras.geojson");
            const response = await request.json();
            //console.log('GeoJSON carregado com sucesso:', response);

            // Add the GeoJSON data to the map
            L.geoJSON(response).addTo(map);
            //console.log('GeoJSON adicionado ao mapa.');
        } catch (error) {
            console.error('Error loading GeoJSON data:', error);
        }
    }

    // Load GeoJSON data
    loadGeoJson();

    // Function to get locations from DHL Location Finder API
    /*async function getLocations() {
           try {
           // Definir o cabeçalho de autorização
           const headers = new Headers();
           headers.append("DHL-API-Key", "MHGWahS2yzAAFhR1Ie5vRWmyyVN7o9lw");

           // Fazer a solicitação à API da DHL Location Finder com o cabeçalho de autorização
           const response = await fetch("https://api-sandbox.dhl.com/location-finder/v1/find-by-address?countryCode=PT&addressLocality=Felgueiras&locationType=servicepoint&radius=1000000&limit=15&hideClosedLocations=false", {
               method: "GET",
               headers: headers
           });


           // Processar os dados JSON retornados
           const data = await response.json();
           console.log(data);
           return data.locations;
       } catch (error) {
           console.error('Erro ao obter as localizações da API da DHL Location Finder:', error);
           return [];
       }
    }*/

    // Carregar os dados JSON localmente
    async function getLocations() {
        try {
            const response = await fetch('/locationsJson/locations.json');
            if (!response.ok) {
                throw new Error('Erro ao carregar os dados JSON.');
            }
            const data = await response.json();
            //console.log('Dados carregados:', data);
            return data.locations;
        } catch (error) {
            console.error('Erro ao carregar os dados JSON:', error);
            return [];
        }
    }

    // Chamar a função para carregar os dados JSON
    getLocations();

    // Function to add markers to the map
    async function addMarkersToMap() {
        try {
            // Criar um novo LayerGroup para armazenar os marcadores
            const markersLayer = L.layerGroup().addTo(map);

            // Obter as localizações da API da DHL Location Finder
            const locations = await getLocations();

            // Iterar sobre as localizações e adicionar marcadores ao LayerGroup
            locations.forEach(location => {
                // Verificar se a localização possui coordenadas válidas
                if (location.place && location.place.geo && location.place.geo.latitude && location.place.geo.longitude) {
                    // Criar um ícone personalizado
                    const customIcon = L.icon({
                        iconUrl: 'https://img.icons8.com/?size=512&id=EUzdsWR7Aq6o&format=png',
                        iconSize: [30, 30], // Tamanho do ícone [largura, altura]
                        //iconAnchor: [20, 40], // Ponto de âncora do ícone [metade da largura, altura]
                        //popupAnchor: [0, -40] // Ponto de âncora do popup [horizontal, vertical], negativo move o popup para cima
                    });
                    const marker = L.marker([location.place.geo.latitude, location.place.geo.longitude], {icon: customIcon});
                    const popupContent = `
                   <b>${location.name}</b><br>
                   ${location.place.address.streetAddress}, ${location.place.address.addressLocality}, ${location.place.address.postalCode}
               `;
                    marker.bindPopup(popupContent);
                    marker.on('click', function () {
                        var warehouseNameInput = document.getElementById("warehouseName");
                        // Preencher o campo com o nome do marcador quando clicado
                        warehouseNameInput.value = location.name;
                    });
                    markersLayer.addLayer(marker); // Adicionar marcador ao LayerGroup
                }
            });

            // Ajustar o mapa para exibir todos os marcadores
            map.fitBounds(markersLayer.getBounds());


            // Ajusta o mapa para exibir todos os marcadores (se houver)
            /*if (markersLayer.getLayers().length > 0) {

                // Cria uma matriz de coordenadas dos marcadores
                const markerCoordinates = markersLayer.getLayers().map(marker => marker.getLatLng());

                // Ajusta o mapa para exibir todos os marcadores
                if (markerCoordinates.length > 0) {
                    const bounds = L.latLngBounds(markerCoordinates);
                    map.fitBounds(bounds);
                } else {
                    console.log('Nenhuma coordenada de marcador encontrada.');
                }
            } else {
                console.log('Nenhum marcador adicionado.');
            }*/
        } catch (error) {
            console.error('Erro ao adicionar marcadores ao mapa:', error);
        }
    }

    addMarkersToMap();

    // Função para verificar se uma localização está dentro do polígono de Felgueiras
    function isLocationInsideFelgueirasPolygon(location, felgueirasPolygonLayer) {
        const point = L.latLng(location.place.geo.latitude, location.place.geo.longitude);
        let isInside = false;

        felgueirasPolygonLayer.eachLayer(layer => {
            if (layer instanceof L.Polygon) {
                isInside = isInside || layer.getBounds().contains(point) && L.Polygon.prototype.containsPoint.call(layer, point);
            }
        });

        return isInside;
    }

</script>


</body>

</html>